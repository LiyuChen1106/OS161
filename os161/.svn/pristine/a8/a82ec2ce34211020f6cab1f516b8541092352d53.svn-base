#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <addrspace.h>
//#include <vm.h>
#include <machine/spl.h>
#include <machine/tlb.h>
// vm.h is included in addrspace.h already

/*
 * Note! If OPT_DUMBVM is set, as is the case until you start the VM
 * assignment, this file is not compiled or linked or in any way
 * used. The cheesy hack versions in dumbvm.c are used instead.
 */

#define DUMBVM_STACKPAGES    12

struct addrspace *
as_create(void)
{
	struct addrspace *as = kmalloc(sizeof(struct addrspace));
	if (as == NULL) {
		return NULL;
	}

	// new vm structure

	// initialize the page table
	int i;
	for (i = 0; i < PT_SIZE; i++) {
		as->two_level_PT[i] = NULL;
	}

	as->as_stackbase = 0;
	as->as_stacknpages = 0;
	as->as_heap_start = 0;
	as->as_heap_end = 0;

	as->as_heapnpages = 0;

	as->as_vbase1 = 0;

	as->as_npages1 = 0;
	as->as_vbase2 = 0;

	as->as_npages2 = 0;

	return as;
}

int
as_copy(struct addrspace *old, struct addrspace **ret)
{
	struct addrspace *new;

	new = as_create();
	if (new == NULL) {
		return ENOMEM;
	}

	/*
	 * Write this.
	 */

	// copy the pointer for the two regions
	new->as_vbase1 = old->as_vbase1;
	new->as_npages1 = old->as_npages1;
	new->as_vbase2 = old->as_vbase2;
	new->as_npages2 = old->as_npages2;
	new->as_stacknpages = old->as_stacknpages;
	new->as_heapnpages = old->as_heapnpages;


	// get pages for the two regions and the stack


	assert(new->as_heap_start == 0);
	assert(new->as_heap_end == 0);

	assert(new->as_stackbase == 0);

	new->as_vbase1 = getppages(new->as_npages1, 1); ///////////////////////
	if (new->as_vbase1 == 0) {
		return ENOMEM;
	}

	new->as_vbase2 = getppages(new->as_npages2, 1); ///////////////////////
	if (new->as_vbase2 == 0) {
		return ENOMEM;
	}

	new->as_heap_start = getppages(new->as_heapnpages, 1); ///////////////////////
	if (new->as_heap_start == 0) {
		return ENOMEM;
	}

	new->as_stackbase = getppages(STACK_MAX, 1); ////////////////////////
	if (new->as_stackbase == 0) {
		return ENOMEM;
	}

	assert(new->as_vbase1 != 0);
	assert(new->as_vbase2 != 0);
	assert(new->as_heap_start != 0);
	assert(new->as_stackbase != 0);

	memmove((void *) PADDR_TO_KVADDR(new->as_vbase1),
		(const void *) PADDR_TO_KVADDR(old->as_vbase1),
		old->as_npages1 * PAGE_SIZE);

	memmove((void *) PADDR_TO_KVADDR(new->as_vbase2),
		(const void *) PADDR_TO_KVADDR(old->as_vbase2),
		old->as_npages2 * PAGE_SIZE);

	memmove((void *) PADDR_TO_KVADDR(new->as_heap_start),
		(const void *) PADDR_TO_KVADDR(old->as_heap_start),
		old->as_heapnpages * PAGE_SIZE);

	memmove((void *) PADDR_TO_KVADDR(new->as_stackbase),
		(const void *) PADDR_TO_KVADDR(old->as_stackbase),
		new->as_stacknpages * PAGE_SIZE);

	// copy the page table
	int i, j;
	// master page table
	for (i = 0; i < PT_SIZE; i++) {
		if (old->two_level_PT[i] != NULL) {
			// allocate space for second level page table
			new->two_level_PT[i] = (struct page_table_entry *) kmalloc(sizeof(struct page_table_entry) * PT_SIZE);
			assert(new->two_level_PT[i] != NULL);

			// second level page table
			for (j = 0; j < PT_SIZE; j++) {

				if (old->two_level_PT[i][j].valid == 1) {
					// do shallow copy for copy_on_write
					new->two_level_PT[i][j].addr = old->two_level_PT[i][j].addr;
					new->two_level_PT[i][j].valid = 1;
					new->two_level_PT[i][j].writeable = 0;

					// add the new entry into coremap
					int k = 0;
					while (k < page_num) {
						if (coremap[k].paddr == new->two_level_PT[i][j].addr) {
							coremap[k].link++;
							break;
						}
					}

				} else {
					// the page is not valid, do not copy
					new->two_level_PT[i][j].valid = 0;
				}
			}
		} else {
			new->two_level_PT[i] = NULL;
		}
	}

	*ret = new;
	return 0;

}

void
as_destroy(struct addrspace *as)
{
	/*
	 * Clean up as needed.
	 */
	// clean up the page table
	int i, j;
	// master page table
	for (i = 0; i < PT_SIZE; i++) {
		if (as->two_level_PT[i] != NULL) {
			// second level page table
			for (j = 0; j < PT_SIZE; j++) {
				int k;
				for (k = 0; k < page_num; k++) {
					if (coremap[k].paddr == as->two_level_PT[i][j].addr) {
						coremap[k].link--;
						if (coremap[k].link == 0) {
							coremap[i].ppage_state = 1;
							coremap[k].as = NULL;
							//                                                    coremap[k].vaddr = 0;
							//                                                    coremap[k].paddr = 0;
							//                                                    coremap[k].link = 0;
							// actually free the memory space
							kfree((paddr_t) as->two_level_PT[i][j].addr);
							break;
						}
					}
				}
			}
			// free the second level pointer
			kfree(as->two_level_PT[i]);
		}
	}



	kfree(as);
}

void
as_activate(struct addrspace *as)
{
	/*
	 * Write this.
	 */

	// (void)as;  // suppress warning until code gets written

	int i, spl;

	(void) as;

	spl = splhigh();

	for (i = 0; i < NUM_TLB; i++) {
		TLB_Write(TLBHI_INVALID(i), TLBLO_INVALID(), i);
	}

	splx(spl);
}

/*
 * Set up a segment at virtual address VADDR of size MEMSIZE. The
 * segment in memory extends from VADDR up to (but not including)
 * VADDR+MEMSIZE.
 *
 * The READABLE, WRITEABLE, and EXECUTABLE flags are set if read,
 * write, or execute permission should be set on the segment. At the
 * moment, these are ignored. When you write the VM system, you may
 * want to implement them.
 */
int
as_define_region(struct addrspace *as, vaddr_t vaddr, size_t sz,
	int readable, int writeable, int executable)
{
	size_t npages;

	/* Align the region. First, the base... */
	sz += vaddr & ~(vaddr_t) PAGE_FRAME;
	vaddr &= PAGE_FRAME;

	/* ...and now the length. */
	sz = (sz + PAGE_SIZE - 1) & PAGE_FRAME;

	npages = sz / PAGE_SIZE;

	/* We don't use these - all pages are read-write */
	(void) readable;
	(void) writeable;
	(void) executable;

	if (as->as_vbase1 == 0) {
		as->as_vbase1 = vaddr;
		as->as_npages1 = npages;
		//as->as_heapbase = vaddr + npages * PAGE_SIZE;
		return 0;
	}

	if (as->as_vbase2 == 0) {
		as->as_vbase2 = vaddr;
		as->as_npages2 = npages;
		//as->as_heapbase = vaddr + npages * PAGE_SIZE;
		return 0;
	}

	/*
	 * Support for more than two regions is not available.
	 */
	kprintf("dumbvm: Warning: too many regions\n");
	return EUNIMP;
}

int
as_prepare_load(struct addrspace *as)
{
	/*
	 * Write this.
	 */

	(void) as;

	return 0;
}

int
as_complete_load(struct addrspace *as)
{
	/*
	 * Write this.
	 */

	// should be setting permission here
	(void) as;
	return 0;
}

int
as_define_stack(struct addrspace *as, vaddr_t *stackptr)
{
	/*
	 * Write this.
	 */

	(void) as;

	/* Initial user-level stack pointer */
	*stackptr = USERSTACK;

	return 0;
}

