#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <thread.h>
#include <curthread.h>
#include <addrspace.h>
#include <vm.h>
#include <synch.h>
#include <machine/spl.h>
#include <machine/tlb.h>
#include <machine/trapframe.h>
#include <machine/vm.h>

/*
 * Following functions are all modified from dumbvm.c
 */

#define DUMBVM_STACKPAGES    12

paddr_t coremap_startpaddr, coremap_endpaddr;
unsigned long coremap_entry_num;

void
vm_bootstrap(void)
{
	paddr_t firstpaddr_temp, lastpaddr_temp;

	ram_getsize(&firstpaddr_temp, &lastpaddr_temp);

	// determine the size of coremap
	unsigned long page_num;
	coremap = (struct coremap_entry*)PADDR_TO_KVADDR(firstpaddr_temp);

	page_num = (lastpaddr_temp - firstpaddr_temp) / PAGE_SIZE;
	coremap_startpaddr = firstpaddr_temp;
	coremap_endpaddr = firstpaddr_temp + page_num * sizeof(struct coremap_entry);
	coremap_entry_num = ROUNDUP((coremap_endpaddr - firstpaddr_temp), PAGE_SIZE) / PAGE_SIZE;

	// initial setup of the coremap
	unsigned long i = 0;
	for( ; i<page_num; i++){
		
		if(i<coremap_entry_num){
			
			coremap[i].ppage_state = 0;
			coremap[i].paddr = firstpaddr_temp + i * PAGE_SIZE;
			coremap[i].vaddr = PADDR_TO_KVADDR(coremap[i].paddr);
		}
		else {
		
			coremap[i].ppage_state = 1;
			
			//check correctness??
			coremap[i].paddr = firstpaddr_temp + i * PAGE_SIZE;
			coremap[i].startpaddr = 0;
			coremap[i].as = NULL;
			coremap[i].chunck_size = 0;
		}

	}

	coremap_lock = lock_create("coremap lock");

}

paddr_t
getppages(unsigned long npages)
{

	paddr_t addr;

	//addr = ram_stealmem(npages);

	// get the next available n physical pages: currently without swap
	unsigned long count = 0;
	unsigned long chunck_start;
	unsigned long i = 0;
	
	lock_acquire(coremap_lock);
	for( ; i < coremap_entry_num; i++) {

		// get the first free page
		if(coremap[i].ppage_state == 0){

			chunck_start = i+1;
			continue;
		}

		if(coremap[i].ppage_state == 1){
			count++;
		} else {

			count = 0;
			chunck_start = i+1;
		}

		if(count == npages)
			break;		
	}
	
	// may want to change this when implementing swapping
	// right now, if no available pages, return 0
	if(i == coremap_entry_num){

		lock_release(coremap_lock);
		return 0;
	}

	// how to synch with PT???
	for(i = chunck_start; i < chunck_start + npages; i++){

		coremap[i].as = curthread->t_vmspace;//check??? && when to store the vaddr?
		coremap[i].ppage_state = 2;
		coremap[i].chunck_size = npages;
		coremap[i].startpaddr = chunck_start;
	}

	lock_release(coremap_lock);
	return addr;
}

/* Allocate/free some kernel-space virtual pages */
vaddr_t 
alloc_kpages(int npages)
{
	paddr_t pa;
	pa = getppages(npages);
	if (pa==0) {
		return 0;
	}
	return PADDR_TO_KVADDR(pa);
}

void 
free_kpages(vaddr_t addr)
{

	unsigned long i = 0;
	int npage_to_free;

	// find the corresponding ppage in coremap
	lock_acquire(coremap_lock);
	
	for( ; i < coremap_entry_num; i++){

		if(coremap[i].vaddr == addr){//how to translate vaddr???

			npage_to_free = coremap[i].chunck_size;
			break;
		}
	}

	//if(i == coremap_entry_num)
		//???
	// not sure: if free one of the pages in the chunck
	// how to synch with PT???
	if(coremap[i].paddr == coremap[i].startpaddr){

		unsigned long j;
		for(j = i; j < i + npage_to_free; j++){

			coremap[j].as = NULL;
			coremap[j].startpaddr = 0;
			coremap[j].ppage_state = 1;
			coremap[j].chunck_size = 0;
		}

	} else {

		coremap[i].as = NULL;
		coremap[i].startpaddr = 0;
		coremap[i].ppage_state = 1;
		coremap[i].chunck_size = 0;
	}

	lock_release(coremap_lock);
}

int
vm_fault(int faulttype, vaddr_t faultaddress)
{
	vaddr_t vbase1, vtop1, vbase2, vtop2, stackbase, stacktop;
	paddr_t paddr;
	int i;
			u_int32_t ehi, elo;
	struct addrspace *as;
	int spl;

	spl = splhigh();

	faultaddress &= PAGE_FRAME;

	DEBUG(DB_VM, "dumbvm: fault: 0x%x\n", faultaddress);

	switch (faulttype) {
	    case VM_FAULT_READONLY:
		/* We always create pages read-write, so we can't get this */
		panic("dumbvm: got VM_FAULT_READONLY\n");
	    case VM_FAULT_READ:
	    case VM_FAULT_WRITE:
		break;
	    default:
		splx(spl);
		return EINVAL;
	}

	as = curthread->t_vmspace;
	if (as == NULL) {
		/*
		 * No address space set up. This is probably a kernel
		 * fault early in boot. Return EFAULT so as to panic
		 * instead of getting into an infinite faulting loop.
		 */
		return EFAULT;
	}

	/* Assert that the address space has been set up properly. */
	assert(as->as_vbase1 != 0);
	assert(as->as_pbase1 != 0);
	assert(as->as_npages1 != 0);
	assert(as->as_vbase2 != 0);
	assert(as->as_pbase2 != 0);
	assert(as->as_npages2 != 0);
	assert(as->as_stackpbase != 0);



	assert((as->as_vbase1 & PAGE_FRAME) == as->as_vbase1);
	assert((as->as_pbase1 & PAGE_FRAME) == as->as_pbase1);
	assert((as->as_vbase2 & PAGE_FRAME) == as->as_vbase2);
	assert((as->as_pbase2 & PAGE_FRAME) == as->as_pbase2);
	assert((as->as_stackpbase & PAGE_FRAME) == as->as_stackpbase);

	vbase1 = as->as_vbase1;
	vtop1 = vbase1 + as->as_npages1 * PAGE_SIZE;
	vbase2 = as->as_vbase2;
	vtop2 = vbase2 + as->as_npages2 * PAGE_SIZE;
	stackbase = USERSTACK - DUMBVM_STACKPAGES * PAGE_SIZE;
	stacktop = USERSTACK;

	if (faultaddress >= vbase1 && faultaddress < vtop1) {
		paddr = (faultaddress - vbase1) + as->as_pbase1;
	}
	else if (faultaddress >= vbase2 && faultaddress < vtop2) {
		paddr = (faultaddress - vbase2) + as->as_pbase2;
	}
	else if (faultaddress >= stackbase && faultaddress < stacktop) {
		paddr = (faultaddress - stackbase) + as->as_stackpbase;
	}
	else {
		splx(spl);
		return EFAULT;
	}

	/* make sure it's page-aligned */
	assert((paddr & PAGE_FRAME)==paddr);

	for (i=0; i<NUM_TLB; i++) {
		TLB_Read(&ehi, &elo, i);
		if (elo & TLBLO_VALID) {
			continue;
		}
		ehi = faultaddress;
		elo = paddr | TLBLO_DIRTY | TLBLO_VALID;
		DEBUG(DB_VM, "dumbvm: 0x%x -> 0x%x\n", faultaddress, paddr);
		TLB_Write(ehi, elo, i);
		splx(spl);
		return 0;
	}

	kprintf("dumbvm: Ran out of TLB entries - cannot handle page fault\n");
	splx(spl);
	return EFAULT;
}


